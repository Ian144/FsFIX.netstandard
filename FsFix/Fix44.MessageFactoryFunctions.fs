module Fix44.MessageFactoryFuncs

// **** this file is generated by fsFixGen ****

open OneOrTwo
open Fix44.Fields
open Fix44.CompoundItems
open Fix44.Messages




let MkHeartbeat () : Heartbeat = {
    TestReqID = None
  }


let MkLogon (encryptMethod:EncryptMethod, heartBtInt:HeartBtInt) : Logon = {
    EncryptMethod = encryptMethod
    HeartBtInt = heartBtInt
    RawData = None
    ResetSeqNumFlag = None
    NextExpectedMsgSeqNum = None
    MaxMessageSize = None
    NoMsgTypesGrp = None
    TestMessageIndicator = None
    Username = None
    Password = None
  }


let MkTestRequest (testReqID:TestReqID) : TestRequest = {
    TestReqID = testReqID
  }


let MkResendRequest (beginSeqNo:BeginSeqNo, endSeqNo:EndSeqNo) : ResendRequest = {
    BeginSeqNo = beginSeqNo
    EndSeqNo = endSeqNo
  }


let MkReject (refSeqNum:RefSeqNum) : Reject = {
    RefSeqNum = refSeqNum
    RefTagID = None
    RefMsgType = None
    SessionRejectReason = None
    Text = None
    EncodedText = None
  }


let MkSequenceReset (newSeqNo:NewSeqNo) : SequenceReset = {
    GapFillFlag = None
    NewSeqNo = newSeqNo
  }


let MkLogout () : Logout = {
    Text = None
    EncodedText = None
  }


let MkBusinessMessageReject (refMsgType:RefMsgType, businessRejectReason:BusinessRejectReason) : BusinessMessageReject = {
    RefSeqNum = None
    RefMsgType = refMsgType
    BusinessRejectRefID = None
    BusinessRejectReason = businessRejectReason
    Text = None
    EncodedText = None
  }


let MkUserRequest (userRequestID:UserRequestID, userRequestType:UserRequestType, username:Username) : UserRequest = {
    UserRequestID = userRequestID
    UserRequestType = userRequestType
    Username = username
    Password = None
    NewPassword = None
    RawData = None
  }


let MkUserResponse (userRequestID:UserRequestID, username:Username) : UserResponse = {
    UserRequestID = userRequestID
    Username = username
    UserStatus = None
    UserStatusText = None
  }


let MkAdvertisement (advId:AdvId, advTransType:AdvTransType, instrument:Instrument, advSide:AdvSide, quantity:Quantity) : Advertisement = {
    AdvId = advId
    AdvTransType = advTransType
    AdvRefID = None
    Instrument = instrument
    NoLegsGrp = None
    AdvertisementNoUnderlyingsGrp = None
    AdvSide = advSide
    Quantity = quantity
    QtyType = None
    Price = None
    Currency = None
    TradeDate = None
    TransactTime = None
    Text = None
    EncodedText = None
    URLLink = None
    LastMkt = None
    TradingSessionID = None
    TradingSessionSubID = None
  }


let MkIndicationOfInterest (iOIID:IOIID, iOITransType:IOITransType, instrument:Instrument, financingDetails:FinancingDetails, side:Side, orderQtyData:OrderQtyData, iOIQty:IOIQty, stipulations:Stipulations, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData) : IndicationOfInterest = {
    IOIID = iOIID
    IOITransType = iOITransType
    IOIRefID = None
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    Side = side
    QtyType = None
    OrderQtyData = orderQtyData
    IOIQty = iOIQty
    Currency = None
    Stipulations = stipulations
    IndicationOfInterestNoLegsGrp = None
    PriceType = None
    Price = None
    ValidUntilTime = None
    IOIQltyInd = None
    IOINaturalFlag = None
    NoIOIQualifiersGrp = None
    Text = None
    EncodedText = None
    TransactTime = None
    URLLink = None
    NoRoutingIDsGrp = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    YieldData = yieldData
  }


let MkNews (headline:Headline, linesOfTextGrp:LinesOfTextGrp list) : News = {
    OrigTime = None
    Urgency = None
    Headline = headline
    EncodedHeadline = None
    NoRoutingIDsGrp = None
    NoRelatedSymGrp = None
    NoLegsGrp = None
    NoUnderlyingsGrp = None
    LinesOfTextGrp = linesOfTextGrp
    URLLink = None
    RawData = None
  }


let MkEmail (emailThreadID:EmailThreadID, emailType:EmailType, subject:Subject, linesOfTextGrp:LinesOfTextGrp list) : Email = {
    EmailThreadID = emailThreadID
    EmailType = emailType
    OrigTime = None
    Subject = subject
    EncodedSubject = None
    NoRoutingIDsGrp = None
    NoRelatedSymGrp = None
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    OrderID = None
    ClOrdID = None
    LinesOfTextGrp = linesOfTextGrp
    RawData = None
  }


let MkQuoteRequest (quoteReqID:QuoteReqID, quoteRequestNoRelatedSymGrp:QuoteRequestNoRelatedSymGrp list) : QuoteRequest = {
    QuoteReqID = quoteReqID
    RFQReqID = None
    ClOrdID = None
    OrderCapacity = None
    QuoteRequestNoRelatedSymGrp = quoteRequestNoRelatedSymGrp
    Text = None
    EncodedText = None
  }


let MkQuoteResponse (quoteRespID:QuoteRespID, quoteRespType:QuoteRespType, parties:Parties, instrument:Instrument, financingDetails:FinancingDetails, orderQtyData:OrderQtyData, stipulations:Stipulations, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData) : QuoteResponse = {
    QuoteRespID = quoteRespID
    QuoteID = None
    QuoteRespType = quoteRespType
    ClOrdID = None
    OrderCapacity = None
    IOIID = None
    QuoteType = None
    NoQuoteQualifiersGrp = None
    Parties = parties
    TradingSessionID = None
    TradingSessionSubID = None
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    Side = None
    OrderQtyData = orderQtyData
    SettlType = None
    SettlDate = None
    SettlDate2 = None
    OrderQty2 = None
    Currency = None
    Stipulations = stipulations
    Account = None
    AcctIDSource = None
    AccountType = None
    QuoteResponseNoLegsGrp = None
    BidPx = None
    OfferPx = None
    MktBidPx = None
    MktOfferPx = None
    MinBidSize = None
    BidSize = None
    MinOfferSize = None
    OfferSize = None
    ValidUntilTime = None
    BidSpotRate = None
    OfferSpotRate = None
    BidForwardPoints = None
    OfferForwardPoints = None
    MidPx = None
    BidYield = None
    MidYield = None
    OfferYield = None
    TransactTime = None
    OrdType = None
    BidForwardPoints2 = None
    OfferForwardPoints2 = None
    SettlCurrBidFxRate = None
    SettlCurrOfferFxRate = None
    SettlCurrFxRateCalc = None
    Commission = None
    CommType = None
    CustOrderCapacity = None
    ExDestination = None
    Text = None
    EncodedText = None
    Price = None
    PriceType = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    YieldData = yieldData
  }


let MkQuoteRequestReject (quoteReqID:QuoteReqID, quoteRequestRejectReason:QuoteRequestRejectReason, quoteRequestRejectNoRelatedSymGrp:QuoteRequestRejectNoRelatedSymGrp list, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData, parties:Parties) : QuoteRequestReject = {
    QuoteReqID = quoteReqID
    RFQReqID = None
    QuoteRequestRejectReason = quoteRequestRejectReason
    QuoteRequestRejectNoRelatedSymGrp = quoteRequestRejectNoRelatedSymGrp
    NoQuoteQualifiersGrp = None
    QuotePriceType = None
    OrdType = None
    ExpireTime = None
    TransactTime = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    PriceType = None
    Price = None
    Price2 = None
    YieldData = yieldData
    Parties = parties
    Text = None
    EncodedText = None
  }


let MkRFQRequest (rFQReqID:RFQReqID, rFQRequestNoRelatedSymGrp:RFQRequestNoRelatedSymGrp list) : RFQRequest = {
    RFQReqID = rFQReqID
    RFQRequestNoRelatedSymGrp = rFQRequestNoRelatedSymGrp
    SubscriptionRequestType = None
  }


let MkQuote (quoteID:QuoteID, parties:Parties, instrument:Instrument, financingDetails:FinancingDetails, orderQtyData:OrderQtyData, stipulations:Stipulations, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData) : Quote = {
    QuoteReqID = None
    QuoteID = quoteID
    QuoteRespID = None
    QuoteType = None
    NoQuoteQualifiersGrp = None
    QuoteResponseLevel = None
    Parties = parties
    TradingSessionID = None
    TradingSessionSubID = None
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    Side = None
    OrderQtyData = orderQtyData
    SettlType = None
    SettlDate = None
    SettlDate2 = None
    OrderQty2 = None
    Currency = None
    Stipulations = stipulations
    Account = None
    AcctIDSource = None
    AccountType = None
    QuoteNoLegsGrp = None
    BidPx = None
    OfferPx = None
    MktBidPx = None
    MktOfferPx = None
    MinBidSize = None
    BidSize = None
    MinOfferSize = None
    OfferSize = None
    ValidUntilTime = None
    BidSpotRate = None
    OfferSpotRate = None
    BidForwardPoints = None
    OfferForwardPoints = None
    MidPx = None
    BidYield = None
    MidYield = None
    OfferYield = None
    TransactTime = None
    OrdType = None
    BidForwardPoints2 = None
    OfferForwardPoints2 = None
    SettlCurrBidFxRate = None
    SettlCurrOfferFxRate = None
    SettlCurrFxRateCalc = None
    CommType = None
    Commission = None
    CustOrderCapacity = None
    ExDestination = None
    OrderCapacity = None
    PriceType = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    YieldData = yieldData
    Text = None
    EncodedText = None
  }


let MkQuoteCancel (quoteID:QuoteID, quoteCancelType:QuoteCancelType, parties:Parties) : QuoteCancel = {
    QuoteReqID = None
    QuoteID = quoteID
    QuoteCancelType = quoteCancelType
    QuoteResponseLevel = None
    Parties = parties
    Account = None
    AcctIDSource = None
    AccountType = None
    TradingSessionID = None
    TradingSessionSubID = None
    NoQuoteEntriesGrp = None
  }


let MkQuoteStatusRequest (instrument:Instrument, financingDetails:FinancingDetails, parties:Parties) : QuoteStatusRequest = {
    QuoteStatusReqID = None
    QuoteID = None
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    Parties = parties
    Account = None
    AcctIDSource = None
    AccountType = None
    TradingSessionID = None
    TradingSessionSubID = None
    SubscriptionRequestType = None
  }


let MkQuoteStatusReport (quoteID:QuoteID, parties:Parties, instrument:Instrument, financingDetails:FinancingDetails, orderQtyData:OrderQtyData, stipulations:Stipulations, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData) : QuoteStatusReport = {
    QuoteStatusReqID = None
    QuoteReqID = None
    QuoteID = quoteID
    QuoteRespID = None
    QuoteType = None
    Parties = parties
    TradingSessionID = None
    TradingSessionSubID = None
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    Side = None
    OrderQtyData = orderQtyData
    SettlType = None
    SettlDate = None
    SettlDate2 = None
    OrderQty2 = None
    Currency = None
    Stipulations = stipulations
    Account = None
    AcctIDSource = None
    AccountType = None
    QuoteStatusReportNoLegsGrp = None
    NoQuoteQualifiersGrp = None
    ExpireTime = None
    Price = None
    PriceType = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    YieldData = yieldData
    BidPx = None
    OfferPx = None
    MktBidPx = None
    MktOfferPx = None
    MinBidSize = None
    BidSize = None
    MinOfferSize = None
    OfferSize = None
    ValidUntilTime = None
    BidSpotRate = None
    OfferSpotRate = None
    BidForwardPoints = None
    OfferForwardPoints = None
    MidPx = None
    BidYield = None
    MidYield = None
    OfferYield = None
    TransactTime = None
    OrdType = None
    BidForwardPoints2 = None
    OfferForwardPoints2 = None
    SettlCurrBidFxRate = None
    SettlCurrOfferFxRate = None
    SettlCurrFxRateCalc = None
    CommType = None
    Commission = None
    CustOrderCapacity = None
    ExDestination = None
    QuoteStatus = None
    Text = None
    EncodedText = None
  }


let MkMassQuote (quoteID:QuoteID, parties:Parties, noQuoteSetsGrp:NoQuoteSetsGrp list) : MassQuote = {
    QuoteReqID = None
    QuoteID = quoteID
    QuoteType = None
    QuoteResponseLevel = None
    Parties = parties
    Account = None
    AcctIDSource = None
    AccountType = None
    DefBidSize = None
    DefOfferSize = None
    NoQuoteSetsGrp = noQuoteSetsGrp
  }


let MkMassQuoteAcknowledgement (quoteStatus:QuoteStatus, parties:Parties) : MassQuoteAcknowledgement = {
    QuoteReqID = None
    QuoteID = None
    QuoteStatus = quoteStatus
    QuoteRejectReason = None
    QuoteResponseLevel = None
    QuoteType = None
    Parties = parties
    Account = None
    AcctIDSource = None
    AccountType = None
    Text = None
    EncodedText = None
    MassQuoteAcknowledgementNoQuoteSetsGrp = None
  }


let MkMarketDataRequest (mDReqID:MDReqID, subscriptionRequestType:SubscriptionRequestType, marketDepth:MarketDepth, noMDEntryTypesGrp:NoMDEntryTypesGrp list, marketDataRequestNoRelatedSymGrp:MarketDataRequestNoRelatedSymGrp list) : MarketDataRequest = {
    MDReqID = mDReqID
    SubscriptionRequestType = subscriptionRequestType
    MarketDepth = marketDepth
    MDUpdateType = None
    AggregatedBook = None
    OpenCloseSettlFlag = None
    Scope = None
    MDImplicitDelete = None
    NoMDEntryTypesGrp = noMDEntryTypesGrp
    MarketDataRequestNoRelatedSymGrp = marketDataRequestNoRelatedSymGrp
    NoTradingSessionsGrp = None
    ApplQueueAction = None
    ApplQueueMax = None
  }


let MkMarketDataSnapshotFullRefresh (instrument:Instrument, noMDEntriesGrp:NoMDEntriesGrp list) : MarketDataSnapshotFullRefresh = {
    MDReqID = None
    Instrument = instrument
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    FinancialStatus = None
    CorporateAction = None
    NetChgPrevDay = None
    NoMDEntriesGrp = noMDEntriesGrp
    ApplQueueDepth = None
    ApplQueueResolution = None
  }


let MkMarketDataIncrementalRefresh (marketDataIncrementalRefreshNoMDEntriesGrp:MarketDataIncrementalRefreshNoMDEntriesGrp list) : MarketDataIncrementalRefresh = {
    MDReqID = None
    MarketDataIncrementalRefreshNoMDEntriesGrp = marketDataIncrementalRefreshNoMDEntriesGrp
    ApplQueueDepth = None
    ApplQueueResolution = None
  }


let MkMarketDataRequestReject (mDReqID:MDReqID) : MarketDataRequestReject = {
    MDReqID = mDReqID
    MDReqRejReason = None
    NoAltMDSourceGrp = None
    Text = None
    EncodedText = None
  }


let MkSecurityDefinitionRequest (securityReqID:SecurityReqID, securityRequestType:SecurityRequestType, instrumentExtension:InstrumentExtension) : SecurityDefinitionRequest = {
    SecurityReqID = securityReqID
    SecurityRequestType = securityRequestType
    Instrument = None
    InstrumentExtension = instrumentExtension
    NoUnderlyingsGrp = None
    Currency = None
    Text = None
    EncodedText = None
    TradingSessionID = None
    TradingSessionSubID = None
    NoLegsGrp = None
    ExpirationCycle = None
    SubscriptionRequestType = None
  }


let MkSecurityDefinition (securityReqID:SecurityReqID, securityResponseID:SecurityResponseID, securityResponseType:SecurityResponseType, instrumentExtension:InstrumentExtension) : SecurityDefinition = {
    SecurityReqID = securityReqID
    SecurityResponseID = securityResponseID
    SecurityResponseType = securityResponseType
    Instrument = None
    InstrumentExtension = instrumentExtension
    NoUnderlyingsGrp = None
    Currency = None
    TradingSessionID = None
    TradingSessionSubID = None
    Text = None
    EncodedText = None
    NoLegsGrp = None
    ExpirationCycle = None
    RoundLot = None
    MinTradeVol = None
  }


let MkSecurityTypeRequest (securityReqID:SecurityReqID) : SecurityTypeRequest = {
    SecurityReqID = securityReqID
    Text = None
    EncodedText = None
    TradingSessionID = None
    TradingSessionSubID = None
    Product = None
    SecurityType = None
    SecuritySubType = None
  }


let MkSecurityTypes (securityReqID:SecurityReqID, securityResponseID:SecurityResponseID, securityResponseType:SecurityResponseType) : SecurityTypes = {
    SecurityReqID = securityReqID
    SecurityResponseID = securityResponseID
    SecurityResponseType = securityResponseType
    TotNoSecurityTypes = None
    LastFragment = None
    NoSecurityTypesGrp = None
    Text = None
    EncodedText = None
    TradingSessionID = None
    TradingSessionSubID = None
    SubscriptionRequestType = None
  }


let MkSecurityListRequest (securityReqID:SecurityReqID, securityListRequestType:SecurityListRequestType, instrumentExtension:InstrumentExtension, financingDetails:FinancingDetails) : SecurityListRequest = {
    SecurityReqID = securityReqID
    SecurityListRequestType = securityListRequestType
    Instrument = None
    InstrumentExtension = instrumentExtension
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    Currency = None
    Text = None
    EncodedText = None
    TradingSessionID = None
    TradingSessionSubID = None
    SubscriptionRequestType = None
  }


let MkSecurityList (securityReqID:SecurityReqID, securityResponseID:SecurityResponseID, securityRequestResult:SecurityRequestResult) : SecurityList = {
    SecurityReqID = securityReqID
    SecurityResponseID = securityResponseID
    SecurityRequestResult = securityRequestResult
    TotNoRelatedSym = None
    LastFragment = None
    SecurityListNoRelatedSymGrp = None
  }


let MkDerivativeSecurityListRequest (securityReqID:SecurityReqID, securityListRequestType:SecurityListRequestType) : DerivativeSecurityListRequest = {
    SecurityReqID = securityReqID
    SecurityListRequestType = securityListRequestType
    UnderlyingInstrument = None
    SecuritySubType = None
    Currency = None
    Text = None
    EncodedText = None
    TradingSessionID = None
    TradingSessionSubID = None
    SubscriptionRequestType = None
  }


let MkDerivativeSecurityList (securityReqID:SecurityReqID, securityResponseID:SecurityResponseID, securityRequestResult:SecurityRequestResult) : DerivativeSecurityList = {
    SecurityReqID = securityReqID
    SecurityResponseID = securityResponseID
    SecurityRequestResult = securityRequestResult
    UnderlyingInstrument = None
    TotNoRelatedSym = None
    LastFragment = None
    DerivativeSecurityListNoRelatedSymGrp = None
  }


let MkSecurityStatusRequest (securityStatusReqID:SecurityStatusReqID, instrument:Instrument, instrumentExtension:InstrumentExtension, subscriptionRequestType:SubscriptionRequestType) : SecurityStatusRequest = {
    SecurityStatusReqID = securityStatusReqID
    Instrument = instrument
    InstrumentExtension = instrumentExtension
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    Currency = None
    SubscriptionRequestType = subscriptionRequestType
    TradingSessionID = None
    TradingSessionSubID = None
  }


let MkSecurityStatus (instrument:Instrument, instrumentExtension:InstrumentExtension) : SecurityStatus = {
    SecurityStatusReqID = None
    Instrument = instrument
    InstrumentExtension = instrumentExtension
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    Currency = None
    TradingSessionID = None
    TradingSessionSubID = None
    UnsolicitedIndicator = None
    SecurityTradingStatus = None
    FinancialStatus = None
    CorporateAction = None
    HaltReason = None
    InViewOfCommon = None
    DueToRelated = None
    BuyVolume = None
    SellVolume = None
    HighPx = None
    LowPx = None
    LastPx = None
    TransactTime = None
    Adjustment = None
    Text = None
    EncodedText = None
  }


let MkTradingSessionStatusRequest (tradSesReqID:TradSesReqID, subscriptionRequestType:SubscriptionRequestType) : TradingSessionStatusRequest = {
    TradSesReqID = tradSesReqID
    TradingSessionID = None
    TradingSessionSubID = None
    TradSesMethod = None
    TradSesMode = None
    SubscriptionRequestType = subscriptionRequestType
  }


let MkTradingSessionStatus (tradingSessionID:TradingSessionID, tradSesStatus:TradSesStatus) : TradingSessionStatus = {
    TradSesReqID = None
    TradingSessionID = tradingSessionID
    TradingSessionSubID = None
    TradSesMethod = None
    TradSesMode = None
    UnsolicitedIndicator = None
    TradSesStatus = tradSesStatus
    TradSesStatusRejReason = None
    TradSesStartTime = None
    TradSesOpenTime = None
    TradSesPreCloseTime = None
    TradSesCloseTime = None
    TradSesEndTime = None
    TotalVolumeTraded = None
    Text = None
    EncodedText = None
  }


let MkNewOrderSingle (clOrdID:ClOrdID, parties:Parties, instrument:Instrument, financingDetails:FinancingDetails, side:Side, transactTime:TransactTime, stipulations:Stipulations, orderQtyData:OrderQtyData, ordType:OrdType, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData, commissionData:CommissionData, pegInstructions:PegInstructions, discretionInstructions:DiscretionInstructions) : NewOrderSingle = {
    ClOrdID = clOrdID
    SecondaryClOrdID = None
    ClOrdLinkID = None
    Parties = parties
    TradeOriginationDate = None
    TradeDate = None
    Account = None
    AcctIDSource = None
    AccountType = None
    DayBookingInst = None
    BookingUnit = None
    PreallocMethod = None
    AllocID = None
    NoAllocsGrp = None
    SettlType = None
    SettlDate = None
    CashMargin = None
    ClearingFeeIndicator = None
    HandlInst = None
    ExecInst = None
    MinQty = None
    MaxFloor = None
    ExDestination = None
    NoTradingSessionsGrp = None
    ProcessCode = None
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    PrevClosePx = None
    Side = side
    LocateReqd = None
    TransactTime = transactTime
    Stipulations = stipulations
    QtyType = None
    OrderQtyData = orderQtyData
    OrdType = ordType
    PriceType = None
    Price = None
    StopPx = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    YieldData = yieldData
    Currency = None
    ComplianceID = None
    SolicitedFlag = None
    IOIID = None
    QuoteID = None
    TimeInForce = None
    EffectiveTime = None
    ExpireDate = None
    ExpireTime = None
    GTBookingInst = None
    CommissionData = commissionData
    OrderCapacity = None
    OrderRestrictions = None
    CustOrderCapacity = None
    ForexReq = None
    SettlCurrency = None
    BookingType = None
    Text = None
    EncodedText = None
    SettlDate2 = None
    OrderQty2 = None
    Price2 = None
    PositionEffect = None
    CoveredOrUncovered = None
    MaxShow = None
    PegInstructions = pegInstructions
    DiscretionInstructions = discretionInstructions
    TargetStrategy = None
    TargetStrategyParameters = None
    ParticipationRate = None
    CancellationRights = None
    MoneyLaunderingStatus = None
    RegistID = None
    Designation = None
  }


let MkExecutionReport (orderID:OrderID, parties:Parties, execID:ExecID, execType:ExecType, ordStatus:OrdStatus, instrument:Instrument, financingDetails:FinancingDetails, side:Side, stipulations:Stipulations, orderQtyData:OrderQtyData, pegInstructions:PegInstructions, discretionInstructions:DiscretionInstructions, leavesQty:LeavesQty, cumQty:CumQty, avgPx:AvgPx, commissionData:CommissionData, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData) : ExecutionReport = {
    OrderID = orderID
    SecondaryOrderID = None
    SecondaryClOrdID = None
    SecondaryExecID = None
    ClOrdID = None
    OrigClOrdID = None
    ClOrdLinkID = None
    QuoteRespID = None
    OrdStatusReqID = None
    MassStatusReqID = None
    TotNumReports = None
    LastRptRequested = None
    Parties = parties
    TradeOriginationDate = None
    NoContraBrokersGrp = None
    ListID = None
    CrossID = None
    OrigCrossID = None
    CrossType = None
    ExecID = execID
    ExecRefID = None
    ExecType = execType
    OrdStatus = ordStatus
    WorkingIndicator = None
    OrdRejReason = None
    ExecRestatementReason = None
    Account = None
    AcctIDSource = None
    AccountType = None
    DayBookingInst = None
    BookingUnit = None
    PreallocMethod = None
    SettlType = None
    SettlDate = None
    CashMargin = None
    ClearingFeeIndicator = None
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    Side = side
    Stipulations = stipulations
    QtyType = None
    OrderQtyData = orderQtyData
    OrdType = None
    PriceType = None
    Price = None
    StopPx = None
    PegInstructions = pegInstructions
    DiscretionInstructions = discretionInstructions
    PeggedPrice = None
    DiscretionPrice = None
    TargetStrategy = None
    TargetStrategyParameters = None
    ParticipationRate = None
    TargetStrategyPerformance = None
    Currency = None
    ComplianceID = None
    SolicitedFlag = None
    TimeInForce = None
    EffectiveTime = None
    ExpireDate = None
    ExpireTime = None
    ExecInst = None
    OrderCapacity = None
    OrderRestrictions = None
    CustOrderCapacity = None
    LastQty = None
    UnderlyingLastQty = None
    LastPx = None
    UnderlyingLastPx = None
    LastParPx = None
    LastSpotRate = None
    LastForwardPoints = None
    LastMkt = None
    TradingSessionID = None
    TradingSessionSubID = None
    TimeBracket = None
    LastCapacity = None
    LeavesQty = leavesQty
    CumQty = cumQty
    AvgPx = avgPx
    DayOrderQty = None
    DayCumQty = None
    DayAvgPx = None
    GTBookingInst = None
    TradeDate = None
    TransactTime = None
    ReportToExch = None
    CommissionData = commissionData
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    YieldData = yieldData
    GrossTradeAmt = None
    NumDaysInterest = None
    ExDate = None
    AccruedInterestRate = None
    AccruedInterestAmt = None
    InterestAtMaturity = None
    EndAccruedInterestAmt = None
    StartCash = None
    EndCash = None
    TradedFlatSwitch = None
    BasisFeatureDate = None
    BasisFeaturePrice = None
    Concession = None
    TotalTakedown = None
    NetMoney = None
    SettlCurrAmt = None
    SettlCurrency = None
    SettlCurrFxRate = None
    SettlCurrFxRateCalc = None
    HandlInst = None
    MinQty = None
    MaxFloor = None
    PositionEffect = None
    MaxShow = None
    BookingType = None
    Text = None
    EncodedText = None
    SettlDate2 = None
    OrderQty2 = None
    LastForwardPoints2 = None
    MultiLegReportingType = None
    CancellationRights = None
    MoneyLaunderingStatus = None
    RegistID = None
    Designation = None
    TransBkdTime = None
    ExecValuationPoint = None
    ExecPriceType = None
    ExecPriceAdjustment = None
    PriorityIndicator = None
    PriceImprovement = None
    LastLiquidityInd = None
    NoContAmtsGrp = None
    ExecutionReportNoLegsGrp = None
    CopyMsgIndicator = None
    NoMiscFeesGrp = None
  }


let MkDontKnowTrade (orderID:OrderID, execID:ExecID, dKReason:DKReason, instrument:Instrument, side:Side, orderQtyData:OrderQtyData) : DontKnowTrade = {
    OrderID = orderID
    SecondaryOrderID = None
    ExecID = execID
    DKReason = dKReason
    Instrument = instrument
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    Side = side
    OrderQtyData = orderQtyData
    LastQty = None
    LastPx = None
    Text = None
    EncodedText = None
  }


let MkOrderCancelReplaceRequest (parties:Parties, origClOrdID:OrigClOrdID, clOrdID:ClOrdID, instrument:Instrument, financingDetails:FinancingDetails, side:Side, transactTime:TransactTime, orderQtyData:OrderQtyData, ordType:OrdType, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData, pegInstructions:PegInstructions, discretionInstructions:DiscretionInstructions, commissionData:CommissionData) : OrderCancelReplaceRequest = {
    OrderID = None
    Parties = parties
    TradeOriginationDate = None
    TradeDate = None
    OrigClOrdID = origClOrdID
    ClOrdID = clOrdID
    SecondaryClOrdID = None
    ClOrdLinkID = None
    ListID = None
    OrigOrdModTime = None
    Account = None
    AcctIDSource = None
    AccountType = None
    DayBookingInst = None
    BookingUnit = None
    PreallocMethod = None
    AllocID = None
    NoAllocsGrp = None
    SettlType = None
    SettlDate = None
    CashMargin = None
    ClearingFeeIndicator = None
    HandlInst = None
    ExecInst = None
    MinQty = None
    MaxFloor = None
    ExDestination = None
    NoTradingSessionsGrp = None
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    Side = side
    TransactTime = transactTime
    QtyType = None
    OrderQtyData = orderQtyData
    OrdType = ordType
    PriceType = None
    Price = None
    StopPx = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    YieldData = yieldData
    PegInstructions = pegInstructions
    DiscretionInstructions = discretionInstructions
    TargetStrategy = None
    TargetStrategyParameters = None
    ParticipationRate = None
    ComplianceID = None
    SolicitedFlag = None
    Currency = None
    TimeInForce = None
    EffectiveTime = None
    ExpireDate = None
    ExpireTime = None
    GTBookingInst = None
    CommissionData = commissionData
    OrderCapacity = None
    OrderRestrictions = None
    CustOrderCapacity = None
    ForexReq = None
    SettlCurrency = None
    BookingType = None
    Text = None
    EncodedText = None
    SettlDate2 = None
    OrderQty2 = None
    Price2 = None
    PositionEffect = None
    CoveredOrUncovered = None
    MaxShow = None
    LocateReqd = None
    CancellationRights = None
    MoneyLaunderingStatus = None
    RegistID = None
    Designation = None
  }


let MkOrderCancelRequest (origClOrdID:OrigClOrdID, clOrdID:ClOrdID, parties:Parties, instrument:Instrument, financingDetails:FinancingDetails, side:Side, transactTime:TransactTime, orderQtyData:OrderQtyData) : OrderCancelRequest = {
    OrigClOrdID = origClOrdID
    OrderID = None
    ClOrdID = clOrdID
    SecondaryClOrdID = None
    ClOrdLinkID = None
    ListID = None
    OrigOrdModTime = None
    Account = None
    AcctIDSource = None
    AccountType = None
    Parties = parties
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    Side = side
    TransactTime = transactTime
    OrderQtyData = orderQtyData
    ComplianceID = None
    Text = None
    EncodedText = None
  }


let MkOrderCancelReject (orderID:OrderID, clOrdID:ClOrdID, origClOrdID:OrigClOrdID, ordStatus:OrdStatus, cxlRejResponseTo:CxlRejResponseTo) : OrderCancelReject = {
    OrderID = orderID
    SecondaryOrderID = None
    SecondaryClOrdID = None
    ClOrdID = clOrdID
    ClOrdLinkID = None
    OrigClOrdID = origClOrdID
    OrdStatus = ordStatus
    WorkingIndicator = None
    OrigOrdModTime = None
    ListID = None
    Account = None
    AcctIDSource = None
    AccountType = None
    TradeOriginationDate = None
    TradeDate = None
    TransactTime = None
    CxlRejResponseTo = cxlRejResponseTo
    CxlRejReason = None
    Text = None
    EncodedText = None
  }


let MkOrderStatusRequest (clOrdID:ClOrdID, parties:Parties, instrument:Instrument, financingDetails:FinancingDetails, side:Side) : OrderStatusRequest = {
    OrderID = None
    ClOrdID = clOrdID
    SecondaryClOrdID = None
    ClOrdLinkID = None
    Parties = parties
    OrdStatusReqID = None
    Account = None
    AcctIDSource = None
    Instrument = instrument
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    Side = side
  }


let MkOrderMassCancelRequest (clOrdID:ClOrdID, massCancelRequestType:MassCancelRequestType, transactTime:TransactTime) : OrderMassCancelRequest = {
    ClOrdID = clOrdID
    SecondaryClOrdID = None
    MassCancelRequestType = massCancelRequestType
    TradingSessionID = None
    TradingSessionSubID = None
    Instrument = None
    UnderlyingInstrument = None
    Side = None
    TransactTime = transactTime
    Text = None
    EncodedText = None
  }


let MkOrderMassCancelReport (orderID:OrderID, massCancelRequestType:MassCancelRequestType, massCancelResponse:MassCancelResponse) : OrderMassCancelReport = {
    ClOrdID = None
    SecondaryClOrdID = None
    OrderID = orderID
    SecondaryOrderID = None
    MassCancelRequestType = massCancelRequestType
    MassCancelResponse = massCancelResponse
    MassCancelRejectReason = None
    TotalAffectedOrders = None
    NoAffectedOrdersGrp = None
    TradingSessionID = None
    TradingSessionSubID = None
    Instrument = None
    UnderlyingInstrument = None
    Side = None
    TransactTime = None
    Text = None
    EncodedText = None
  }


let MkOrderMassStatusRequest (massStatusReqID:MassStatusReqID, massStatusReqType:MassStatusReqType, parties:Parties) : OrderMassStatusRequest = {
    MassStatusReqID = massStatusReqID
    MassStatusReqType = massStatusReqType
    Parties = parties
    Account = None
    AcctIDSource = None
    TradingSessionID = None
    TradingSessionSubID = None
    Instrument = None
    UnderlyingInstrument = None
    Side = None
  }


let MkNewOrderCross (crossID:CrossID, crossType:CrossType, crossPrioritization:CrossPrioritization, noSidesGrp:NoSidesGrp OneOrTwo, instrument:Instrument, transactTime:TransactTime, stipulations:Stipulations, ordType:OrdType, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData, pegInstructions:PegInstructions, discretionInstructions:DiscretionInstructions) : NewOrderCross = {
    CrossID = crossID
    CrossType = crossType
    CrossPrioritization = crossPrioritization
    NoSidesGrp = noSidesGrp
    Instrument = instrument
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    SettlType = None
    SettlDate = None
    HandlInst = None
    ExecInst = None
    MinQty = None
    MaxFloor = None
    ExDestination = None
    NoTradingSessionsGrp = None
    ProcessCode = None
    PrevClosePx = None
    LocateReqd = None
    TransactTime = transactTime
    Stipulations = stipulations
    OrdType = ordType
    PriceType = None
    Price = None
    StopPx = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    YieldData = yieldData
    Currency = None
    ComplianceID = None
    IOIID = None
    QuoteID = None
    TimeInForce = None
    EffectiveTime = None
    ExpireDate = None
    ExpireTime = None
    GTBookingInst = None
    MaxShow = None
    PegInstructions = pegInstructions
    DiscretionInstructions = discretionInstructions
    TargetStrategy = None
    TargetStrategyParameters = None
    ParticipationRate = None
    CancellationRights = None
    MoneyLaunderingStatus = None
    RegistID = None
    Designation = None
  }


let MkCrossOrderCancelReplaceRequest (crossID:CrossID, origCrossID:OrigCrossID, crossType:CrossType, crossPrioritization:CrossPrioritization, crossOrderCancelReplaceRequestNoSidesGrp:CrossOrderCancelReplaceRequestNoSidesGrp OneOrTwo, instrument:Instrument, transactTime:TransactTime, stipulations:Stipulations, ordType:OrdType, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, yieldData:YieldData, pegInstructions:PegInstructions, discretionInstructions:DiscretionInstructions) : CrossOrderCancelReplaceRequest = {
    OrderID = None
    CrossID = crossID
    OrigCrossID = origCrossID
    CrossType = crossType
    CrossPrioritization = crossPrioritization
    CrossOrderCancelReplaceRequestNoSidesGrp = crossOrderCancelReplaceRequestNoSidesGrp
    Instrument = instrument
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    SettlType = None
    SettlDate = None
    HandlInst = None
    ExecInst = None
    MinQty = None
    MaxFloor = None
    ExDestination = None
    NoTradingSessionsGrp = None
    ProcessCode = None
    PrevClosePx = None
    LocateReqd = None
    TransactTime = transactTime
    Stipulations = stipulations
    OrdType = ordType
    PriceType = None
    Price = None
    StopPx = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    YieldData = yieldData
    Currency = None
    ComplianceID = None
    IOIID = None
    QuoteID = None
    TimeInForce = None
    EffectiveTime = None
    ExpireDate = None
    ExpireTime = None
    GTBookingInst = None
    MaxShow = None
    PegInstructions = pegInstructions
    DiscretionInstructions = discretionInstructions
    TargetStrategy = None
    TargetStrategyParameters = None
    ParticipationRate = None
    CancellationRights = None
    MoneyLaunderingStatus = None
    RegistID = None
    Designation = None
  }


let MkCrossOrderCancelRequest (crossID:CrossID, origCrossID:OrigCrossID, crossType:CrossType, crossPrioritization:CrossPrioritization, crossOrderCancelRequestNoSidesGrp:CrossOrderCancelRequestNoSidesGrp OneOrTwo, instrument:Instrument, transactTime:TransactTime) : CrossOrderCancelRequest = {
    OrderID = None
    CrossID = crossID
    OrigCrossID = origCrossID
    CrossType = crossType
    CrossPrioritization = crossPrioritization
    CrossOrderCancelRequestNoSidesGrp = crossOrderCancelRequestNoSidesGrp
    Instrument = instrument
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    TransactTime = transactTime
  }


let MkNewOrderMultileg (clOrdID:ClOrdID, parties:Parties, side:Side, instrument:Instrument, newOrderMultilegNoLegsGrp:NewOrderMultilegNoLegsGrp list, transactTime:TransactTime, orderQtyData:OrderQtyData, ordType:OrdType, commissionData:CommissionData, pegInstructions:PegInstructions, discretionInstructions:DiscretionInstructions) : NewOrderMultileg = {
    ClOrdID = clOrdID
    SecondaryClOrdID = None
    ClOrdLinkID = None
    Parties = parties
    TradeOriginationDate = None
    TradeDate = None
    Account = None
    AcctIDSource = None
    AccountType = None
    DayBookingInst = None
    BookingUnit = None
    PreallocMethod = None
    AllocID = None
    NewOrderMultilegNoAllocsGrp = None
    SettlType = None
    SettlDate = None
    CashMargin = None
    ClearingFeeIndicator = None
    HandlInst = None
    ExecInst = None
    MinQty = None
    MaxFloor = None
    ExDestination = None
    NoTradingSessionsGrp = None
    ProcessCode = None
    Side = side
    Instrument = instrument
    NoUnderlyingsGrp = None
    PrevClosePx = None
    NewOrderMultilegNoLegsGrp = newOrderMultilegNoLegsGrp
    LocateReqd = None
    TransactTime = transactTime
    QtyType = None
    OrderQtyData = orderQtyData
    OrdType = ordType
    PriceType = None
    Price = None
    StopPx = None
    Currency = None
    ComplianceID = None
    SolicitedFlag = None
    IOIID = None
    QuoteID = None
    TimeInForce = None
    EffectiveTime = None
    ExpireDate = None
    ExpireTime = None
    GTBookingInst = None
    CommissionData = commissionData
    OrderCapacity = None
    OrderRestrictions = None
    CustOrderCapacity = None
    ForexReq = None
    SettlCurrency = None
    BookingType = None
    Text = None
    EncodedText = None
    PositionEffect = None
    CoveredOrUncovered = None
    MaxShow = None
    PegInstructions = pegInstructions
    DiscretionInstructions = discretionInstructions
    TargetStrategy = None
    TargetStrategyParameters = None
    ParticipationRate = None
    CancellationRights = None
    MoneyLaunderingStatus = None
    RegistID = None
    Designation = None
    MultiLegRptTypeReq = None
  }


let MkMultilegOrderCancelReplaceRequest (origClOrdID:OrigClOrdID, clOrdID:ClOrdID, parties:Parties, side:Side, instrument:Instrument, multilegOrderCancelReplaceRequestNoLegsGrp:MultilegOrderCancelReplaceRequestNoLegsGrp list, transactTime:TransactTime, orderQtyData:OrderQtyData, ordType:OrdType, commissionData:CommissionData, pegInstructions:PegInstructions, discretionInstructions:DiscretionInstructions) : MultilegOrderCancelReplaceRequest = {
    OrderID = None
    OrigClOrdID = origClOrdID
    ClOrdID = clOrdID
    SecondaryClOrdID = None
    ClOrdLinkID = None
    OrigOrdModTime = None
    Parties = parties
    TradeOriginationDate = None
    TradeDate = None
    Account = None
    AcctIDSource = None
    AccountType = None
    DayBookingInst = None
    BookingUnit = None
    PreallocMethod = None
    AllocID = None
    MultilegOrderCancelReplaceRequestNoAllocsGrp = None
    SettlType = None
    SettlDate = None
    CashMargin = None
    ClearingFeeIndicator = None
    HandlInst = None
    ExecInst = None
    MinQty = None
    MaxFloor = None
    ExDestination = None
    NoTradingSessionsGrp = None
    ProcessCode = None
    Side = side
    Instrument = instrument
    NoUnderlyingsGrp = None
    PrevClosePx = None
    MultilegOrderCancelReplaceRequestNoLegsGrp = multilegOrderCancelReplaceRequestNoLegsGrp
    LocateReqd = None
    TransactTime = transactTime
    QtyType = None
    OrderQtyData = orderQtyData
    OrdType = ordType
    PriceType = None
    Price = None
    StopPx = None
    Currency = None
    ComplianceID = None
    SolicitedFlag = None
    IOIID = None
    QuoteID = None
    TimeInForce = None
    EffectiveTime = None
    ExpireDate = None
    ExpireTime = None
    GTBookingInst = None
    CommissionData = commissionData
    OrderCapacity = None
    OrderRestrictions = None
    CustOrderCapacity = None
    ForexReq = None
    SettlCurrency = None
    BookingType = None
    Text = None
    EncodedText = None
    PositionEffect = None
    CoveredOrUncovered = None
    MaxShow = None
    PegInstructions = pegInstructions
    DiscretionInstructions = discretionInstructions
    TargetStrategy = None
    TargetStrategyParameters = None
    ParticipationRate = None
    CancellationRights = None
    MoneyLaunderingStatus = None
    RegistID = None
    Designation = None
    MultiLegRptTypeReq = None
  }


let MkBidRequest (clientBidID:ClientBidID, bidRequestTransType:BidRequestTransType, totNoRelatedSym:TotNoRelatedSym, bidType:BidType, bidTradeType:BidTradeType, basisPxType:BasisPxType) : BidRequest = {
    BidID = None
    ClientBidID = clientBidID
    BidRequestTransType = bidRequestTransType
    ListName = None
    TotNoRelatedSym = totNoRelatedSym
    BidType = bidType
    NumTickets = None
    Currency = None
    SideValue1 = None
    SideValue2 = None
    NoBidDescriptorsGrp = None
    NoBidComponentsGrp = None
    LiquidityIndType = None
    WtAverageLiquidity = None
    ExchangeForPhysical = None
    OutMainCntryUIndex = None
    CrossPercent = None
    ProgRptReqs = None
    ProgPeriodInterval = None
    IncTaxInd = None
    ForexReq = None
    NumBidders = None
    TradeDate = None
    BidTradeType = bidTradeType
    BasisPxType = basisPxType
    StrikeTime = None
    Text = None
    EncodedText = None
  }


let MkBidResponse (bidResponseNoBidComponentsGrp:BidResponseNoBidComponentsGrp list) : BidResponse = {
    BidID = None
    ClientBidID = None
    BidResponseNoBidComponentsGrp = bidResponseNoBidComponentsGrp
  }


let MkNewOrderList (listID:ListID, bidType:BidType, totNoOrders:TotNoOrders, newOrderListNoOrdersGrp:NewOrderListNoOrdersGrp list) : NewOrderList = {
    ListID = listID
    BidID = None
    ClientBidID = None
    ProgRptReqs = None
    BidType = bidType
    ProgPeriodInterval = None
    CancellationRights = None
    MoneyLaunderingStatus = None
    RegistID = None
    ListExecInstType = None
    ListExecInst = None
    EncodedListExecInst = None
    AllowableOneSidednessPct = None
    AllowableOneSidednessValue = None
    AllowableOneSidednessCurr = None
    TotNoOrders = totNoOrders
    LastFragment = None
    NewOrderListNoOrdersGrp = newOrderListNoOrdersGrp
  }


let MkListStrikePrice (listID:ListID, totNoStrikes:TotNoStrikes, noStrikesGrp:NoStrikesGrp list) : ListStrikePrice = {
    ListID = listID
    TotNoStrikes = totNoStrikes
    LastFragment = None
    NoStrikesGrp = noStrikesGrp
    ListStrikePriceNoUnderlyingsGrp = None
  }


let MkListStatus (listID:ListID, listStatusType:ListStatusType, noRpts:NoRpts, listOrderStatus:ListOrderStatus, rptSeq:RptSeq, totNoOrders:TotNoOrders, listStatusNoOrdersGrp:ListStatusNoOrdersGrp list) : ListStatus = {
    ListID = listID
    ListStatusType = listStatusType
    NoRpts = noRpts
    ListOrderStatus = listOrderStatus
    RptSeq = rptSeq
    ListStatusText = None
    EncodedListStatusText = None
    TransactTime = None
    TotNoOrders = totNoOrders
    LastFragment = None
    ListStatusNoOrdersGrp = listStatusNoOrdersGrp
  }


let MkListExecute (listID:ListID, transactTime:TransactTime) : ListExecute = {
    ListID = listID
    ClientBidID = None
    BidID = None
    TransactTime = transactTime
    Text = None
    EncodedText = None
  }


let MkListCancelRequest (listID:ListID, transactTime:TransactTime) : ListCancelRequest = {
    ListID = listID
    TransactTime = transactTime
    TradeOriginationDate = None
    TradeDate = None
    Text = None
    EncodedText = None
  }


let MkListStatusRequest (listID:ListID) : ListStatusRequest = {
    ListID = listID
    Text = None
    EncodedText = None
  }


let MkAllocationInstruction (allocID:AllocID, allocTransType:AllocTransType, allocType:AllocType, allocNoOrdersType:AllocNoOrdersType, side:Side, instrument:Instrument, instrumentExtension:InstrumentExtension, financingDetails:FinancingDetails, quantity:Quantity, avgPx:AvgPx, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, parties:Parties, tradeDate:TradeDate, stipulations:Stipulations, yieldData:YieldData, allocationInstructionNoAllocsGrp:AllocationInstructionNoAllocsGrp list) : AllocationInstruction = {
    AllocID = allocID
    AllocTransType = allocTransType
    AllocType = allocType
    SecondaryAllocID = None
    RefAllocID = None
    AllocCancReplaceReason = None
    AllocIntermedReqType = None
    AllocLinkID = None
    AllocLinkType = None
    BookingRefID = None
    AllocNoOrdersType = allocNoOrdersType
    NoOrdersGrp = None
    AllocationInstructionNoExecsGrp = None
    PreviouslyReported = None
    ReversalIndicator = None
    MatchType = None
    Side = side
    Instrument = instrument
    InstrumentExtension = instrumentExtension
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    Quantity = quantity
    QtyType = None
    LastMkt = None
    TradeOriginationDate = None
    TradingSessionID = None
    TradingSessionSubID = None
    PriceType = None
    AvgPx = avgPx
    AvgParPx = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    Currency = None
    AvgPxPrecision = None
    Parties = parties
    TradeDate = tradeDate
    TransactTime = None
    SettlType = None
    SettlDate = None
    BookingType = None
    GrossTradeAmt = None
    Concession = None
    TotalTakedown = None
    NetMoney = None
    PositionEffect = None
    AutoAcceptIndicator = None
    Text = None
    EncodedText = None
    NumDaysInterest = None
    AccruedInterestRate = None
    AccruedInterestAmt = None
    TotalAccruedInterestAmt = None
    InterestAtMaturity = None
    EndAccruedInterestAmt = None
    StartCash = None
    EndCash = None
    LegalConfirm = None
    Stipulations = stipulations
    YieldData = yieldData
    TotNoAllocs = None
    LastFragment = None
    AllocationInstructionNoAllocsGrp = allocationInstructionNoAllocsGrp
  }


let MkAllocationInstructionAck (allocID:AllocID, parties:Parties, transactTime:TransactTime, allocStatus:AllocStatus) : AllocationInstructionAck = {
    AllocID = allocID
    Parties = parties
    SecondaryAllocID = None
    TradeDate = None
    TransactTime = transactTime
    AllocStatus = allocStatus
    AllocRejCode = None
    AllocType = None
    AllocIntermedReqType = None
    MatchStatus = None
    Product = None
    SecurityType = None
    Text = None
    EncodedText = None
    AllocationInstructionAckNoAllocsGrp = None
  }


let MkAllocationReport (allocReportID:AllocReportID, allocTransType:AllocTransType, allocReportType:AllocReportType, allocStatus:AllocStatus, allocNoOrdersType:AllocNoOrdersType, side:Side, instrument:Instrument, instrumentExtension:InstrumentExtension, financingDetails:FinancingDetails, quantity:Quantity, avgPx:AvgPx, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, parties:Parties, tradeDate:TradeDate, stipulations:Stipulations, yieldData:YieldData, allocationReportNoAllocsGrp:AllocationReportNoAllocsGrp list) : AllocationReport = {
    AllocReportID = allocReportID
    AllocID = None
    AllocTransType = allocTransType
    AllocReportRefID = None
    AllocCancReplaceReason = None
    SecondaryAllocID = None
    AllocReportType = allocReportType
    AllocStatus = allocStatus
    AllocRejCode = None
    RefAllocID = None
    AllocIntermedReqType = None
    AllocLinkID = None
    AllocLinkType = None
    BookingRefID = None
    AllocNoOrdersType = allocNoOrdersType
    NoOrdersGrp = None
    AllocationReportNoExecsGrp = None
    PreviouslyReported = None
    ReversalIndicator = None
    MatchType = None
    Side = side
    Instrument = instrument
    InstrumentExtension = instrumentExtension
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    Quantity = quantity
    QtyType = None
    LastMkt = None
    TradeOriginationDate = None
    TradingSessionID = None
    TradingSessionSubID = None
    PriceType = None
    AvgPx = avgPx
    AvgParPx = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    Currency = None
    AvgPxPrecision = None
    Parties = parties
    TradeDate = tradeDate
    TransactTime = None
    SettlType = None
    SettlDate = None
    BookingType = None
    GrossTradeAmt = None
    Concession = None
    TotalTakedown = None
    NetMoney = None
    PositionEffect = None
    AutoAcceptIndicator = None
    Text = None
    EncodedText = None
    NumDaysInterest = None
    AccruedInterestRate = None
    AccruedInterestAmt = None
    TotalAccruedInterestAmt = None
    InterestAtMaturity = None
    EndAccruedInterestAmt = None
    StartCash = None
    EndCash = None
    LegalConfirm = None
    Stipulations = stipulations
    YieldData = yieldData
    TotNoAllocs = None
    LastFragment = None
    AllocationReportNoAllocsGrp = allocationReportNoAllocsGrp
  }


let MkAllocationReportAck (allocReportID:AllocReportID, allocID:AllocID, parties:Parties, transactTime:TransactTime, allocStatus:AllocStatus) : AllocationReportAck = {
    AllocReportID = allocReportID
    AllocID = allocID
    Parties = parties
    SecondaryAllocID = None
    TradeDate = None
    TransactTime = transactTime
    AllocStatus = allocStatus
    AllocRejCode = None
    AllocReportType = None
    AllocIntermedReqType = None
    MatchStatus = None
    Product = None
    SecurityType = None
    Text = None
    EncodedText = None
    AllocationReportAckNoAllocsGrp = None
  }


let MkConfirmation (confirmID:ConfirmID, confirmTransType:ConfirmTransType, confirmType:ConfirmType, confirmStatus:ConfirmStatus, parties:Parties, transactTime:TransactTime, tradeDate:TradeDate, instrument:Instrument, instrumentExtension:InstrumentExtension, financingDetails:FinancingDetails, noUnderlyingsGrp:NoUnderlyingsGrp list, noLegsGrp:NoLegsGrp list, yieldData:YieldData, allocQty:AllocQty, side:Side, noCapacitiesGrp:NoCapacitiesGrp list, allocAccount:AllocAccount, avgPx:AvgPx, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, grossTradeAmt:GrossTradeAmt, netMoney:NetMoney, settlInstructionsData:SettlInstructionsData, commissionData:CommissionData, stipulations:Stipulations) : Confirmation = {
    ConfirmID = confirmID
    ConfirmRefID = None
    ConfirmReqID = None
    ConfirmTransType = confirmTransType
    ConfirmType = confirmType
    CopyMsgIndicator = None
    LegalConfirm = None
    ConfirmStatus = confirmStatus
    Parties = parties
    NoOrdersGrp = None
    AllocID = None
    SecondaryAllocID = None
    IndividualAllocID = None
    TransactTime = transactTime
    TradeDate = tradeDate
    TrdRegTimestamps = None
    Instrument = instrument
    InstrumentExtension = instrumentExtension
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = noUnderlyingsGrp
    NoLegsGrp = noLegsGrp
    YieldData = yieldData
    AllocQty = allocQty
    QtyType = None
    Side = side
    Currency = None
    LastMkt = None
    NoCapacitiesGrp = noCapacitiesGrp
    AllocAccount = allocAccount
    AllocAcctIDSource = None
    AllocAccountType = None
    AvgPx = avgPx
    AvgPxPrecision = None
    PriceType = None
    AvgParPx = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    ReportedPx = None
    Text = None
    EncodedText = None
    ProcessCode = None
    GrossTradeAmt = grossTradeAmt
    NumDaysInterest = None
    ExDate = None
    AccruedInterestRate = None
    AccruedInterestAmt = None
    InterestAtMaturity = None
    EndAccruedInterestAmt = None
    StartCash = None
    EndCash = None
    Concession = None
    TotalTakedown = None
    NetMoney = netMoney
    MaturityNetMoney = None
    SettlCurrAmt = None
    SettlCurrency = None
    SettlCurrFxRate = None
    SettlCurrFxRateCalc = None
    SettlType = None
    SettlDate = None
    SettlInstructionsData = settlInstructionsData
    CommissionData = commissionData
    SharedCommission = None
    Stipulations = stipulations
    NoMiscFeesGrp = None
  }


let MkConfirmationAck (confirmID:ConfirmID, tradeDate:TradeDate, transactTime:TransactTime, affirmStatus:AffirmStatus) : ConfirmationAck = {
    ConfirmID = confirmID
    TradeDate = tradeDate
    TransactTime = transactTime
    AffirmStatus = affirmStatus
    ConfirmRejReason = None
    MatchStatus = None
    Text = None
    EncodedText = None
  }


let MkConfirmationRequest (confirmReqID:ConfirmReqID, confirmType:ConfirmType, transactTime:TransactTime) : ConfirmationRequest = {
    ConfirmReqID = confirmReqID
    ConfirmType = confirmType
    NoOrdersGrp = None
    AllocID = None
    SecondaryAllocID = None
    IndividualAllocID = None
    TransactTime = transactTime
    AllocAccount = None
    AllocAcctIDSource = None
    AllocAccountType = None
    Text = None
    EncodedText = None
  }


let MkSettlementInstructions (settlInstMsgID:SettlInstMsgID, settlInstMode:SettlInstMode, transactTime:TransactTime) : SettlementInstructions = {
    SettlInstMsgID = settlInstMsgID
    SettlInstReqID = None
    SettlInstMode = settlInstMode
    SettlInstReqRejCode = None
    Text = None
    EncodedText = None
    SettlInstSource = None
    ClOrdID = None
    TransactTime = transactTime
    NoSettlInstGrp = None
  }


let MkSettlementInstructionRequest (settlInstReqID:SettlInstReqID, transactTime:TransactTime, parties:Parties) : SettlementInstructionRequest = {
    SettlInstReqID = settlInstReqID
    TransactTime = transactTime
    Parties = parties
    AllocAccount = None
    AllocAcctIDSource = None
    Side = None
    Product = None
    SecurityType = None
    CFICode = None
    EffectiveTime = None
    ExpireTime = None
    LastUpdateTime = None
    StandInstDbType = None
    StandInstDbName = None
    StandInstDbID = None
  }


let MkTradeCaptureReportRequest (tradeRequestID:TradeRequestID, tradeRequestType:TradeRequestType, parties:Parties, instrumentExtension:InstrumentExtension, financingDetails:FinancingDetails) : TradeCaptureReportRequest = {
    TradeRequestID = tradeRequestID
    TradeRequestType = tradeRequestType
    SubscriptionRequestType = None
    TradeReportID = None
    SecondaryTradeReportID = None
    ExecID = None
    ExecType = None
    OrderID = None
    ClOrdID = None
    MatchStatus = None
    TrdType = None
    TrdSubType = None
    TransferReason = None
    SecondaryTrdType = None
    TradeLinkID = None
    TrdMatchID = None
    Parties = parties
    Instrument = None
    InstrumentExtension = instrumentExtension
    FinancingDetails = financingDetails
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    NoDatesGrp = None
    ClearingBusinessDate = None
    TradingSessionID = None
    TradingSessionSubID = None
    TimeBracket = None
    Side = None
    MultiLegReportingType = None
    TradeInputSource = None
    TradeInputDevice = None
    ResponseTransportType = None
    ResponseDestination = None
    Text = None
    EncodedText = None
  }


let MkTradeCaptureReportRequestAck (tradeRequestID:TradeRequestID, tradeRequestType:TradeRequestType, tradeRequestResult:TradeRequestResult, tradeRequestStatus:TradeRequestStatus) : TradeCaptureReportRequestAck = {
    TradeRequestID = tradeRequestID
    TradeRequestType = tradeRequestType
    SubscriptionRequestType = None
    TotNumTradeReports = None
    TradeRequestResult = tradeRequestResult
    TradeRequestStatus = tradeRequestStatus
    Instrument = None
    NoUnderlyingsGrp = None
    NoLegsGrp = None
    MultiLegReportingType = None
    ResponseTransportType = None
    ResponseDestination = None
    Text = None
    EncodedText = None
  }


let MkTradeCaptureReport (tradeReportID:TradeReportID, previouslyReported:PreviouslyReported, instrument:Instrument, financingDetails:FinancingDetails, orderQtyData:OrderQtyData, yieldData:YieldData, lastQty:LastQty, lastPx:LastPx, tradeDate:TradeDate, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, transactTime:TransactTime, tradeCaptureReportNoSidesGrp:TradeCaptureReportNoSidesGrp OneOrTwo) : TradeCaptureReport = {
    TradeReportID = tradeReportID
    TradeReportTransType = None
    TradeReportType = None
    TradeRequestID = None
    TrdType = None
    TrdSubType = None
    SecondaryTrdType = None
    TransferReason = None
    ExecType = None
    TotNumTradeReports = None
    LastRptRequested = None
    UnsolicitedIndicator = None
    SubscriptionRequestType = None
    TradeReportRefID = None
    SecondaryTradeReportRefID = None
    SecondaryTradeReportID = None
    TradeLinkID = None
    TrdMatchID = None
    ExecID = None
    OrdStatus = None
    SecondaryExecID = None
    ExecRestatementReason = None
    PreviouslyReported = previouslyReported
    PriceType = None
    Instrument = instrument
    FinancingDetails = financingDetails
    OrderQtyData = orderQtyData
    QtyType = None
    YieldData = yieldData
    NoUnderlyingsGrp = None
    UnderlyingTradingSessionID = None
    UnderlyingTradingSessionSubID = None
    LastQty = lastQty
    LastPx = lastPx
    LastParPx = None
    LastSpotRate = None
    LastForwardPoints = None
    LastMkt = None
    TradeDate = tradeDate
    ClearingBusinessDate = None
    AvgPx = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    AvgPxIndicator = None
    PositionAmountData = None
    MultiLegReportingType = None
    TradeLegRefID = None
    TradeCaptureReportNoLegsGrp = None
    TransactTime = transactTime
    TrdRegTimestamps = None
    SettlType = None
    SettlDate = None
    MatchStatus = None
    MatchType = None
    TradeCaptureReportNoSidesGrp = tradeCaptureReportNoSidesGrp
    CopyMsgIndicator = None
    PublishTrdIndicator = None
    ShortSaleReason = None
  }


let MkTradeCaptureReportAck (tradeReportID:TradeReportID, execType:ExecType, instrument:Instrument) : TradeCaptureReportAck = {
    TradeReportID = tradeReportID
    TradeReportTransType = None
    TradeReportType = None
    TrdType = None
    TrdSubType = None
    SecondaryTrdType = None
    TransferReason = None
    ExecType = execType
    TradeReportRefID = None
    SecondaryTradeReportRefID = None
    TrdRptStatus = None
    TradeReportRejectReason = None
    SecondaryTradeReportID = None
    SubscriptionRequestType = None
    TradeLinkID = None
    TrdMatchID = None
    ExecID = None
    SecondaryExecID = None
    Instrument = instrument
    TransactTime = None
    TrdRegTimestamps = None
    ResponseTransportType = None
    ResponseDestination = None
    Text = None
    EncodedText = None
    TradeCaptureReportAckNoLegsGrp = None
    ClearingFeeIndicator = None
    OrderCapacity = None
    OrderRestrictions = None
    CustOrderCapacity = None
    Account = None
    AcctIDSource = None
    AccountType = None
    PositionEffect = None
    PreallocMethod = None
    TradeCaptureReportAckNoAllocsGrp = None
  }


let MkRegistrationInstructions (registID:RegistID, registTransType:RegistTransType, registRefID:RegistRefID, parties:Parties) : RegistrationInstructions = {
    RegistID = registID
    RegistTransType = registTransType
    RegistRefID = registRefID
    ClOrdID = None
    Parties = parties
    Account = None
    AcctIDSource = None
    RegistAcctType = None
    TaxAdvantageType = None
    OwnershipType = None
    NoRegistDtlsGrp = None
    NoDistribInstsGrp = None
  }


let MkRegistrationInstructionsResponse (registID:RegistID, registTransType:RegistTransType, registRefID:RegistRefID, parties:Parties, registStatus:RegistStatus) : RegistrationInstructionsResponse = {
    RegistID = registID
    RegistTransType = registTransType
    RegistRefID = registRefID
    ClOrdID = None
    Parties = parties
    Account = None
    AcctIDSource = None
    RegistStatus = registStatus
    RegistRejReasonCode = None
    RegistRejReasonText = None
  }


let MkPositionMaintenanceRequest (posReqID:PosReqID, posTransType:PosTransType, posMaintAction:PosMaintAction, clearingBusinessDate:ClearingBusinessDate, parties:Parties, account:Account, accountType:AccountType, instrument:Instrument, transactTime:TransactTime, positionQty:PositionQty) : PositionMaintenanceRequest = {
    PosReqID = posReqID
    PosTransType = posTransType
    PosMaintAction = posMaintAction
    OrigPosReqRefID = None
    PosMaintRptRefID = None
    ClearingBusinessDate = clearingBusinessDate
    SettlSessID = None
    SettlSessSubID = None
    Parties = parties
    Account = account
    AcctIDSource = None
    AccountType = accountType
    Instrument = instrument
    Currency = None
    NoLegsGrp = None
    NoUnderlyingsGrp = None
    NoTradingSessionsGrp = None
    TransactTime = transactTime
    PositionQty = positionQty
    AdjustmentType = None
    ContraryInstructionIndicator = None
    PriorSpreadIndicator = None
    ThresholdAmount = None
    Text = None
    EncodedText = None
  }


let MkPositionMaintenanceReport (posMaintRptID:PosMaintRptID, posTransType:PosTransType, posMaintAction:PosMaintAction, origPosReqRefID:OrigPosReqRefID, posMaintStatus:PosMaintStatus, clearingBusinessDate:ClearingBusinessDate, parties:Parties, account:Account, accountType:AccountType, instrument:Instrument, transactTime:TransactTime, positionQty:PositionQty, positionAmountData:PositionAmountData) : PositionMaintenanceReport = {
    PosMaintRptID = posMaintRptID
    PosTransType = posTransType
    PosReqID = None
    PosMaintAction = posMaintAction
    OrigPosReqRefID = origPosReqRefID
    PosMaintStatus = posMaintStatus
    PosMaintResult = None
    ClearingBusinessDate = clearingBusinessDate
    SettlSessID = None
    SettlSessSubID = None
    Parties = parties
    Account = account
    AcctIDSource = None
    AccountType = accountType
    Instrument = instrument
    Currency = None
    NoLegsGrp = None
    NoUnderlyingsGrp = None
    NoTradingSessionsGrp = None
    TransactTime = transactTime
    PositionQty = positionQty
    PositionAmountData = positionAmountData
    AdjustmentType = None
    ThresholdAmount = None
    Text = None
    EncodedText = None
  }


let MkRequestForPositions (posReqID:PosReqID, posReqType:PosReqType, parties:Parties, account:Account, accountType:AccountType, clearingBusinessDate:ClearingBusinessDate, transactTime:TransactTime) : RequestForPositions = {
    PosReqID = posReqID
    PosReqType = posReqType
    MatchStatus = None
    SubscriptionRequestType = None
    Parties = parties
    Account = account
    AcctIDSource = None
    AccountType = accountType
    Instrument = None
    Currency = None
    NoLegsGrp = None
    NoUnderlyingsGrp = None
    ClearingBusinessDate = clearingBusinessDate
    SettlSessID = None
    SettlSessSubID = None
    NoTradingSessionsGrp = None
    TransactTime = transactTime
    ResponseTransportType = None
    ResponseDestination = None
    Text = None
    EncodedText = None
  }


let MkRequestForPositionsAck (posMaintRptID:PosMaintRptID, posReqResult:PosReqResult, posReqStatus:PosReqStatus, parties:Parties, account:Account, accountType:AccountType) : RequestForPositionsAck = {
    PosMaintRptID = posMaintRptID
    PosReqID = None
    TotalNumPosReports = None
    UnsolicitedIndicator = None
    PosReqResult = posReqResult
    PosReqStatus = posReqStatus
    Parties = parties
    Account = account
    AcctIDSource = None
    AccountType = accountType
    Instrument = None
    Currency = None
    NoLegsGrp = None
    NoUnderlyingsGrp = None
    ResponseTransportType = None
    ResponseDestination = None
    Text = None
    EncodedText = None
  }


let MkPositionReport (posMaintRptID:PosMaintRptID, posReqResult:PosReqResult, clearingBusinessDate:ClearingBusinessDate, parties:Parties, account:Account, accountType:AccountType, settlPrice:SettlPrice, settlPriceType:SettlPriceType, priorSettlPrice:PriorSettlPrice, positionQty:PositionQty, positionAmountData:PositionAmountData) : PositionReport = {
    PosMaintRptID = posMaintRptID
    PosReqID = None
    PosReqType = None
    SubscriptionRequestType = None
    TotalNumPosReports = None
    UnsolicitedIndicator = None
    PosReqResult = posReqResult
    ClearingBusinessDate = clearingBusinessDate
    SettlSessID = None
    SettlSessSubID = None
    Parties = parties
    Account = account
    AcctIDSource = None
    AccountType = accountType
    Instrument = None
    Currency = None
    SettlPrice = settlPrice
    SettlPriceType = settlPriceType
    PriorSettlPrice = priorSettlPrice
    NoLegsGrp = None
    PositionReportNoUnderlyingsGrp = None
    PositionQty = positionQty
    PositionAmountData = positionAmountData
    RegistStatus = None
    DeliveryDate = None
    Text = None
    EncodedText = None
  }


let MkAssignmentReport (asgnRptID:AsgnRptID, parties:Parties, accountType:AccountType, positionQty:PositionQty, positionAmountData:PositionAmountData, settlPrice:SettlPrice, settlPriceType:SettlPriceType, underlyingSettlPrice:UnderlyingSettlPrice, assignmentMethod:AssignmentMethod, openInterest:OpenInterest, exerciseMethod:ExerciseMethod, settlSessID:SettlSessID, settlSessSubID:SettlSessSubID, clearingBusinessDate:ClearingBusinessDate) : AssignmentReport = {
    AsgnRptID = asgnRptID
    TotNumAssignmentReports = None
    LastRptRequested = None
    Parties = parties
    Account = None
    AccountType = accountType
    Instrument = None
    Currency = None
    NoLegsGrp = None
    NoUnderlyingsGrp = None
    PositionQty = positionQty
    PositionAmountData = positionAmountData
    ThresholdAmount = None
    SettlPrice = settlPrice
    SettlPriceType = settlPriceType
    UnderlyingSettlPrice = underlyingSettlPrice
    ExpireDate = None
    AssignmentMethod = assignmentMethod
    AssignmentUnit = None
    OpenInterest = openInterest
    ExerciseMethod = exerciseMethod
    SettlSessID = settlSessID
    SettlSessSubID = settlSessSubID
    ClearingBusinessDate = clearingBusinessDate
    Text = None
    EncodedText = None
  }


let MkCollateralRequest (collReqID:CollReqID, collAsgnReason:CollAsgnReason, transactTime:TransactTime, parties:Parties, financingDetails:FinancingDetails, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, stipulations:Stipulations) : CollateralRequest = {
    CollReqID = collReqID
    CollAsgnReason = collAsgnReason
    TransactTime = transactTime
    ExpireTime = None
    Parties = parties
    Account = None
    AccountType = None
    ClOrdID = None
    OrderID = None
    SecondaryOrderID = None
    SecondaryClOrdID = None
    NoExecsGrp = None
    NoTradesGrp = None
    Instrument = None
    FinancingDetails = financingDetails
    SettlDate = None
    Quantity = None
    QtyType = None
    Currency = None
    NoLegsGrp = None
    CollateralRequestNoUnderlyingsGrp = None
    MarginExcess = None
    TotalNetValue = None
    CashOutstanding = None
    TrdRegTimestamps = None
    Side = None
    NoMiscFeesGrp = None
    Price = None
    PriceType = None
    AccruedInterestAmt = None
    EndAccruedInterestAmt = None
    StartCash = None
    EndCash = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    Stipulations = stipulations
    TradingSessionID = None
    TradingSessionSubID = None
    SettlSessID = None
    SettlSessSubID = None
    ClearingBusinessDate = None
    Text = None
    EncodedText = None
  }


let MkCollateralAssignment (collAsgnID:CollAsgnID, collAsgnReason:CollAsgnReason, collAsgnTransType:CollAsgnTransType, transactTime:TransactTime, parties:Parties, financingDetails:FinancingDetails, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, stipulations:Stipulations, settlInstructionsData:SettlInstructionsData) : CollateralAssignment = {
    CollAsgnID = collAsgnID
    CollReqID = None
    CollAsgnReason = collAsgnReason
    CollAsgnTransType = collAsgnTransType
    CollAsgnRefID = None
    TransactTime = transactTime
    ExpireTime = None
    Parties = parties
    Account = None
    AccountType = None
    ClOrdID = None
    OrderID = None
    SecondaryOrderID = None
    SecondaryClOrdID = None
    NoExecsGrp = None
    NoTradesGrp = None
    Instrument = None
    FinancingDetails = financingDetails
    SettlDate = None
    Quantity = None
    QtyType = None
    Currency = None
    NoLegsGrp = None
    CollateralAssignmentNoUnderlyingsGrp = None
    MarginExcess = None
    TotalNetValue = None
    CashOutstanding = None
    TrdRegTimestamps = None
    Side = None
    NoMiscFeesGrp = None
    Price = None
    PriceType = None
    AccruedInterestAmt = None
    EndAccruedInterestAmt = None
    StartCash = None
    EndCash = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    Stipulations = stipulations
    SettlInstructionsData = settlInstructionsData
    TradingSessionID = None
    TradingSessionSubID = None
    SettlSessID = None
    SettlSessSubID = None
    ClearingBusinessDate = None
    Text = None
    EncodedText = None
  }


let MkCollateralResponse (collRespID:CollRespID, collAsgnID:CollAsgnID, collAsgnReason:CollAsgnReason, collAsgnRespType:CollAsgnRespType, transactTime:TransactTime, parties:Parties, financingDetails:FinancingDetails, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, stipulations:Stipulations) : CollateralResponse = {
    CollRespID = collRespID
    CollAsgnID = collAsgnID
    CollReqID = None
    CollAsgnReason = collAsgnReason
    CollAsgnTransType = None
    CollAsgnRespType = collAsgnRespType
    CollAsgnRejectReason = None
    TransactTime = transactTime
    Parties = parties
    Account = None
    AccountType = None
    ClOrdID = None
    OrderID = None
    SecondaryOrderID = None
    SecondaryClOrdID = None
    NoExecsGrp = None
    NoTradesGrp = None
    Instrument = None
    FinancingDetails = financingDetails
    SettlDate = None
    Quantity = None
    QtyType = None
    Currency = None
    NoLegsGrp = None
    CollateralResponseNoUnderlyingsGrp = None
    MarginExcess = None
    TotalNetValue = None
    CashOutstanding = None
    TrdRegTimestamps = None
    Side = None
    NoMiscFeesGrp = None
    Price = None
    PriceType = None
    AccruedInterestAmt = None
    EndAccruedInterestAmt = None
    StartCash = None
    EndCash = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    Stipulations = stipulations
    Text = None
    EncodedText = None
  }


let MkCollateralReport (collRptID:CollRptID, collStatus:CollStatus, parties:Parties, financingDetails:FinancingDetails, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, stipulations:Stipulations, settlInstructionsData:SettlInstructionsData) : CollateralReport = {
    CollRptID = collRptID
    CollInquiryID = None
    CollStatus = collStatus
    TotNumReports = None
    LastRptRequested = None
    Parties = parties
    Account = None
    AccountType = None
    ClOrdID = None
    OrderID = None
    SecondaryOrderID = None
    SecondaryClOrdID = None
    NoExecsGrp = None
    NoTradesGrp = None
    Instrument = None
    FinancingDetails = financingDetails
    SettlDate = None
    Quantity = None
    QtyType = None
    Currency = None
    NoLegsGrp = None
    NoUnderlyingsGrp = None
    MarginExcess = None
    TotalNetValue = None
    CashOutstanding = None
    TrdRegTimestamps = None
    Side = None
    NoMiscFeesGrp = None
    Price = None
    PriceType = None
    AccruedInterestAmt = None
    EndAccruedInterestAmt = None
    StartCash = None
    EndCash = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    Stipulations = stipulations
    SettlInstructionsData = settlInstructionsData
    TradingSessionID = None
    TradingSessionSubID = None
    SettlSessID = None
    SettlSessSubID = None
    ClearingBusinessDate = None
    Text = None
    EncodedText = None
  }


let MkCollateralInquiry (parties:Parties, financingDetails:FinancingDetails, spreadOrBenchmarkCurveData:SpreadOrBenchmarkCurveData, stipulations:Stipulations, settlInstructionsData:SettlInstructionsData) : CollateralInquiry = {
    CollInquiryID = None
    NoCollInquiryQualifierGrp = None
    SubscriptionRequestType = None
    ResponseTransportType = None
    ResponseDestination = None
    Parties = parties
    Account = None
    AccountType = None
    ClOrdID = None
    OrderID = None
    SecondaryOrderID = None
    SecondaryClOrdID = None
    NoExecsGrp = None
    NoTradesGrp = None
    Instrument = None
    FinancingDetails = financingDetails
    SettlDate = None
    Quantity = None
    QtyType = None
    Currency = None
    NoLegsGrp = None
    NoUnderlyingsGrp = None
    MarginExcess = None
    TotalNetValue = None
    CashOutstanding = None
    TrdRegTimestamps = None
    Side = None
    Price = None
    PriceType = None
    AccruedInterestAmt = None
    EndAccruedInterestAmt = None
    StartCash = None
    EndCash = None
    SpreadOrBenchmarkCurveData = spreadOrBenchmarkCurveData
    Stipulations = stipulations
    SettlInstructionsData = settlInstructionsData
    TradingSessionID = None
    TradingSessionSubID = None
    SettlSessID = None
    SettlSessSubID = None
    ClearingBusinessDate = None
    Text = None
    EncodedText = None
  }


let MkNetworkStatusRequest (networkRequestType:NetworkRequestType, networkRequestID:NetworkRequestID) : NetworkStatusRequest = {
    NetworkRequestType = networkRequestType
    NetworkRequestID = networkRequestID
    NoCompIDsGrp = None
  }


let MkNetworkStatusResponse (networkStatusResponseType:NetworkStatusResponseType, networkStatusResponseNoCompIDsGrp:NetworkStatusResponseNoCompIDsGrp list) : NetworkStatusResponse = {
    NetworkStatusResponseType = networkStatusResponseType
    NetworkRequestID = None
    NetworkResponseID = None
    LastNetworkResponseID = None
    NetworkStatusResponseNoCompIDsGrp = networkStatusResponseNoCompIDsGrp
  }


let MkCollateralInquiryAck (collInquiryID:CollInquiryID, collInquiryStatus:CollInquiryStatus, parties:Parties, financingDetails:FinancingDetails) : CollateralInquiryAck = {
    CollInquiryID = collInquiryID
    CollInquiryStatus = collInquiryStatus
    CollInquiryResult = None
    NoCollInquiryQualifierGrp = None
    TotNumReports = None
    Parties = parties
    Account = None
    AccountType = None
    ClOrdID = None
    OrderID = None
    SecondaryOrderID = None
    SecondaryClOrdID = None
    NoExecsGrp = None
    NoTradesGrp = None
    Instrument = None
    FinancingDetails = financingDetails
    SettlDate = None
    Quantity = None
    QtyType = None
    Currency = None
    NoLegsGrp = None
    NoUnderlyingsGrp = None
    TradingSessionID = None
    TradingSessionSubID = None
    SettlSessID = None
    SettlSessSubID = None
    ClearingBusinessDate = None
    ResponseTransportType = None
    ResponseDestination = None
    Text = None
    EncodedText = None
  }
